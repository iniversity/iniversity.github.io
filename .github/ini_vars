Ancient InI Test

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Three.js Memory Game</title>
  <style>
    /* Basic styling */
    body {
      margin: 0;
      overflow: hidden;
      font-family: Arial, sans-serif;
      background: #333;
      color: #fff;
    }
    canvas { display: block; }
    /* UI overlay styling */
    #ui {
      position: absolute;
      top: 10px;
      left: 10px;
      background: rgba(0,0,0,0.7);
      padding: 10px;
      border-radius: 5px;
      max-width: 300px;
      z-index: 10;
    }
    #ui button {
      margin: 5px 5px 5px 0;
      padding: 5px 10px;
      font-size: 14px;
    }
    #instructions {
      font-size: 14px;
      margin-bottom: 10px;
    }
    #scoreboard { margin-top: 10px; }
  </style>
</head>
<body>
  <!-- UI Overlay -->
  <div id="ui">
    <div id="instructions">
      <strong>Memory Game</strong><br>
      Click two cards to find a match. Each match gives you 10 points.
    </div>
    <button id="startBtn">Start Game</button>
    <button id="resetBtn">Reset Game</button>
    <button id="toggleSizeBtn">Enlarge Cards</button>
    <div id="scoreboard">Score: 0</div>
  </div>

  <!-- Include Three.js from CDN -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
    /***********************
     * Global Variables
     ***********************/
    let scene, camera, renderer, raycaster, mouse;
    let cards = [], selectedCards = [];
    let score = 0, gameActive = false;
    let cardScale = 1; // 1 (normal) or 1.5 (enlarged)
    // Base dimensions for a card
    const cardW = 3, cardH = 4, gap = 1;

    // Memory game data: 8 unique items (each appears twice = 16 cards)
    const items = ["Cupid", "Venus", "Eros", "Aphrodite", "Amor", "Valentine", "St. Valentine", "Romulus"];
    let cardData = [];
    items.forEach(item => {
      cardData.push({ id: item, text: item });
      cardData.push({ id: item, text: item });
    });

    // Utility: Fisher–Yates shuffle
    function shuffle(array) {
      for (let i = array.length - 1; i > 0; i--) {
        let j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
      }
    }

    /***********************
     * Three.js Initialization
     ***********************/
    function initThree() {
      scene = new THREE.Scene();
      camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.set(0, 0, 20);
      renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(window.innerWidth, window.innerHeight);
      document.body.appendChild(renderer.domElement);
      raycaster = new THREE.Raycaster();
      mouse = new THREE.Vector2();
      window.addEventListener("click", onMouseClick);
      window.addEventListener("resize", onWindowResize);
    }

    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    }

    /***********************
     * Card Creation
     ***********************/
    // Create a card as a THREE.Group containing a back and front
    function createCard(data) {
      let group = new THREE.Group();
      let geom = new THREE.PlaneGeometry(cardW * cardScale, cardH * cardScale);

      // Back Face: a simple "?" mark
      let backCanvas = document.createElement("canvas");
      backCanvas.width = 256; backCanvas.height = 256;
      let ctx = backCanvas.getContext("2d");
      ctx.fillStyle = "#444";
      ctx.fillRect(0, 0, 256, 256);
      ctx.fillStyle = "#fff";
      ctx.font = "bold 120px Arial";
      ctx.textAlign = "center";
      ctx.textBaseline = "middle";
      ctx.fillText("?", 128, 128);
      let backTex = new THREE.CanvasTexture(backCanvas);
      let backMat = new THREE.MeshBasicMaterial({ map: backTex });
      let backMesh = new THREE.Mesh(geom, backMat);
      group.add(backMesh);

      // Front Face: displays the item text
      let frontCanvas = document.createElement("canvas");
      frontCanvas.width = 256; frontCanvas.height = 256;
      let ctx2 = frontCanvas.getContext("2d");
      ctx2.fillStyle = "#fff";
      ctx2.fillRect(0, 0, 256, 256);
      ctx2.fillStyle = "#000";
      ctx2.font = "bold 40px Arial";
      ctx2.textAlign = "center";
      ctx2.textBaseline = "middle";
      ctx2.fillText(data.text, 128, 128);
      let frontTex = new THREE.CanvasTexture(frontCanvas);
      let frontMat = new THREE.MeshBasicMaterial({ map: frontTex });
      let frontMesh = new THREE.Mesh(geom, frontMat);
      // Rotate the front face so it appears when the card is flipped
      frontMesh.rotation.y = Math.PI;
      group.add(frontMesh);

      // Store card data within the group
      group.userData.card = {
        id: data.id,
        isFlipped: false,
        isMatched: false,
        group: group,
        anim: null
      };
      return group;
    }

    /***********************
     * Board Setup
     ***********************/
    // Set up the game board by shuffling and placing the cards in a grid
    function setupBoard() {
      // Remove any existing cards from the scene
      cards.forEach(card => scene.remove(card));
      cards = [];
      selectedCards = [];
      score = 0;
      updateScore();
      shuffle(cardData);
      const n = cardData.length;
      // Calculate grid dimensions (4x4 for 16 cards)
      const cols = Math.ceil(Math.sqrt(n));
      const rows = Math.ceil(n / cols);
      const totalW = cols * (cardW * cardScale) + (cols - 1) * gap;
      const totalH = rows * (cardH * cardScale) + (rows - 1) * gap;
      const startX = -totalW / 2 + (cardW * cardScale) / 2;
      const startY = totalH / 2 - (cardH * cardScale) / 2;
      for (let i = 0; i < n; i++) {
        const data = cardData[i];
        const group = createCard(data);
        const col = i % cols;
        const row = Math.floor(i / cols);
        group.position.x = startX + col * (cardW * cardScale + gap);
        group.position.y = startY - row * (cardH * cardScale + gap);
        scene.add(group);
        cards.push(group);
      }
    }

    /***********************
     * Score Update
     ***********************/
    function updateScore() {
      document.getElementById("scoreboard").innerText = "Score: " + score;
    }

    /***********************
     * Card Interaction
     ***********************/
    // Handle mouse clicks to flip cards
    function onMouseClick(event) {
      if (!gameActive) return;
      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
      mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;
      raycaster.setFromCamera(mouse, camera);
      let intersects = raycaster.intersectObjects(scene.children, true);
      if (intersects.length > 0) {
        let obj = intersects[0].object;
        let group = obj.parent;
        let card = group.userData.card;
        if (card.isFlipped || card.isMatched || selectedCards.length >= 2) return;
        flipCard(card, true);
        selectedCards.push(card);
        if (selectedCards.length === 2) {
          setTimeout(checkMatch, 1000);
        }
      }
    }

    // Check whether the two flipped cards match
    function checkMatch() {
      if (selectedCards.length < 2) return;
      if (selectedCards[0].id === selectedCards[1].id) {
        selectedCards[0].isMatched = true;
        selectedCards[1].isMatched = true;
        score += 10;
        updateScore();
        // End the game if all cards are matched
        if (cards.every(g => g.userData.card.isMatched)) {
          alert("Game Over! Final Score: " + score);
          gameActive = false;
        }
      } else {
        // Not a match – flip the cards back over
        selectedCards.forEach(card => flipCard(card, false));
      }
      selectedCards = [];
    }

    // Flip a card with a simple animation (to show front if faceUp is true; back otherwise)
    function flipCard(card, faceUp) {
      let target = faceUp ? Math.PI : 0;
      let start = card.group.rotation.y;
      let startTime = performance.now();
      let duration = 500;
      card.anim = true;
      (function animateFlip() {
        let now = performance.now();
        let progress = Math.min((now - startTime) / duration, 1);
        card.group.rotation.y = start + (target - start) * progress;
        if (progress < 1) {
          requestAnimationFrame(animateFlip);
        } else {
          card.isFlipped = faceUp;
          card.anim = false;
        }
      })();
    }

    /***********************
     * Animation Loop
     ***********************/
    function animate() {
      requestAnimationFrame(animate);
      renderer.render(scene, camera);
    }

    /***********************
     * UI Button Listeners
     ***********************/
    document.getElementById("startBtn").addEventListener("click", () => {
      if (!gameActive) {
        gameActive = true;
        setupBoard();
      }
    });

    document.getElementById("resetBtn").addEventListener("click", () => {
      gameActive = false;
      cards.forEach(card => scene.remove(card));
      cards = [];
      selectedCards = [];
      score = 0;
      updateScore();
    });

    document.getElementById("toggleSizeBtn").addEventListener("click", () => {
      cardScale = (cardScale === 1) ? 1.5 : 1;
      if (gameActive) setupBoard();
    });

    /***********************
     * Start the Application
     ***********************/
    initThree();
    animate();
  </script>
</body>
</html>
